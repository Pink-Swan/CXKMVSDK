#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef CXKMVAPIKIT_SWIFT_H
#define CXKMVAPIKIT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CXKMVAPIKit",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

SWIFT_CLASS("_TtC11CXKMVAPIKit12CXKBaseModel")
@interface CXKBaseModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CXKMVRecommendModel;
@class CXKMVFiltersModel;
@class NSString;

/// 数据接口
SWIFT_CLASS("_TtC11CXKMVAPIKit16CXKMVAPIAllDatas")
@interface CXKMVAPIAllDatas : CXKBaseModel
@property (nonatomic, copy) NSArray<CXKMVRecommendModel *> * _Nonnull recommends;
@property (nonatomic, strong) CXKMVFiltersModel * _Nonnull filters;
@property (nonatomic, copy) NSString * _Nonnull data_type;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CXKMVFilmModel;

SWIFT_CLASS("_TtC11CXKMVAPIKit19CXKMVAPISearchDatas")
@interface CXKMVAPISearchDatas : CXKBaseModel
@property (nonatomic, copy) NSArray<CXKMVFilmModel *> * _Nonnull contents;
@property (nonatomic, copy) NSArray<CXKMVFilmModel *> * _Nonnull contents2;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull z_info;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull keywords;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum CXKMVFilmType : NSInteger;
@class CXKMVStarModel;
@class CXKMVContentRelatedModel;

SWIFT_CLASS("_TtC11CXKMVAPIKit21CXKMVBaseContentModel")
@interface CXKMVBaseContentModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull cover;
@property (nonatomic, copy) NSString * _Nonnull rate;
@property (nonatomic, copy) NSString * _Nonnull time;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull genres;
@property (nonatomic, copy) NSString * _Nonnull country;
@property (nonatomic, copy) NSString * _Nonnull des;
@property (nonatomic) enum CXKMVFilmType type;
@property (nonatomic, copy) NSString * _Nonnull source;
@property (nonatomic, copy) NSString * _Nonnull quality;
@property (nonatomic) NSInteger like;
@property (nonatomic) NSInteger unlike;
@property (nonatomic, copy) NSArray<CXKMVStarModel *> * _Nonnull stars;
@property (nonatomic, copy) NSArray<CXKMVContentRelatedModel *> * _Nonnull relations;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit24CXKMVContentRelatedModel")
@interface CXKMVContentRelatedModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull data_type;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSArray<CXKMVRecommendModel *> * _Nonnull recommends;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit14CXKMVFilmModel")
@interface CXKMVFilmModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull cover;
@property (nonatomic, copy) NSString * _Nonnull rate;
@property (nonatomic, copy) NSString * _Nonnull data_type;
@property (nonatomic, copy) NSString * _Nonnull year;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull stars;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull genres;
@property (nonatomic, copy) NSString * _Nonnull country;
@property (nonatomic, copy) NSString * _Nonnull quality;
@property (nonatomic, copy) NSString * _Nonnull seasons_epis;
@property (nonatomic, copy, getter=new, setter=setNew:) NSString * _Nonnull new_;
@property (nonatomic) NSInteger best;
@property (nonatomic, copy) NSString * _Nonnull board;
- (CXKMVRecommendModel * _Nonnull)toRecommendModel SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CXKMVFilmType, open) {
  CXKMVFilmTypeMovie = 1,
  CXKMVFilmTypeTv = 2,
  CXKMVFilmTypeAll = 100,
};


SWIFT_CLASS("_TtC11CXKMVAPIKit16CXKMVFilterModel")
@interface CXKMVFilterModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull id;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CXKMVFilterType, open) {
  CXKMVFilterTypeType = 0,
  CXKMVFilterTypeGenre = 1,
  CXKMVFilterTypeRelease = 2,
  CXKMVFilterTypeCountry = 3,
  CXKMVFilterTypeOrder = 4,
};


SWIFT_CLASS("_TtC11CXKMVAPIKit17CXKMVFiltersModel")
@interface CXKMVFiltersModel : CXKBaseModel
@property (nonatomic, copy) NSArray<CXKMVFilterModel *> * _Nonnull orderbys;
@property (nonatomic, copy) NSArray<CXKMVFilterModel *> * _Nonnull genres;
@property (nonatomic, copy) NSArray<CXKMVFilterModel *> * _Nonnull pubs;
@property (nonatomic, copy) NSArray<CXKMVFilterModel *> * _Nonnull types;
@property (nonatomic, copy) NSArray<CXKMVFilterModel *> * _Nonnull countrys;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CXKMVSourceQualityModel;

SWIFT_CLASS("_TtC11CXKMVAPIKit22CXKMVMovieContentModel")
@interface CXKMVMovieContentModel : CXKMVBaseContentModel
@property (nonatomic, copy) NSArray<CXKMVSourceQualityModel *> * _Nonnull qualitys;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit15CXKMVNetworkAPI")
@interface CXKMVNetworkAPI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



@class CXKMVTVContentModel;
@class CXKMVTVSeasonModel;
@class CXKMVSubtitleModel;
@class NSURL;

@interface CXKMVNetworkAPI (SWIFT_EXTENSION(CXKMVAPIKit))
+ (void)fetchConfig:(NSString * _Nonnull)url completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// Authorization, first call
+ (void)authWithCompletion:(void (^ _Nullable)(void))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// The pageSize parameter is incorrect, and it does not take effect.
+ (void)fetchAllWithPage:(NSInteger)page pageSize:(NSInteger)pageSize type:(NSString * _Nullable)type genre:(NSString * _Nullable)genre country:(NSString * _Nullable)country release:(NSString * _Nullable)release orderby:(NSString * _Nullable)orderby completion:(void (^ _Nullable)(CXKMVAPIAllDatas * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// Currently, there are only page, pagesize, and keyword searches, as well as several others. Not tested yet.
/// The pageSize parameter is incorrect, and it does not take effect.
+ (void)searchWithPage:(NSInteger)page pageSize:(NSInteger)pageSize keyword:(NSString * _Nullable)keyword completion:(void (^ _Nullable)(CXKMVAPISearchDatas * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
+ (void)filmDetailWithId:(NSString * _Nonnull)id type:(enum CXKMVFilmType)type completion:(void (^ _Nullable)(id _Nullable))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// Get movie details and return information CXKMVMovieContentModel object, which comes with playurl. If not, it means it cannot be played.
+ (void)movieDetailWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(CXKMVMovieContentModel * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// Get TV series details and return information CXKMVTVContentModel object
+ (void)tvDetailWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(CXKMVTVContentModel * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// Get the number of episodes in a certain season and return the CXKMVTVSeasonModel object
+ (void)tvSeasonInfoWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(CXKMVTVSeasonModel * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// Pass the episode id, the value in the block is directly the url, and it can be judged externally whether it is empty.
+ (void)tvEpisodeUrlWithId:(NSString * _Nonnull)id completion:(void (^ _Nullable)(NSArray<CXKMVSourceQualityModel *> * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
/// Get multi-subtitle interface
/// id: In movie, it is the id directly, in tv, it is the episode id.
/// type: .movie .tv cannot be .all
+ (void)subtitleWithId:(NSString * _Nonnull)id type:(enum CXKMVFilmType)type completion:(void (^ _Nullable)(NSArray<CXKMVSubtitleModel *> * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
+ (void)downloadSubtitle:(CXKMVSubtitleModel * _Nonnull)model completion:(void (^ _Nullable)(NSURL * _Nonnull))completion fails:(void (^ _Nullable)(NSError * _Nullable))fails;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit19CXKMVRecommendModel")
@interface CXKMVRecommendModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull rate;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull genres;
@property (nonatomic, copy) NSString * _Nonnull board;
@property (nonatomic, copy) NSString * _Nonnull i_117;
@property (nonatomic, copy) NSString * _Nonnull i_116;
@property (nonatomic, copy) NSString * _Nonnull cover;
@property (nonatomic, copy) NSString * _Nonnull m_type;
@property (nonatomic, copy) NSString * _Nonnull data_type;
@property (nonatomic, copy) NSString * _Nonnull quality;
@property (nonatomic, copy) NSString * _Nonnull i_177;
@property (nonatomic) NSInteger order;
@property (nonatomic, copy) NSString * _Nonnull seasons_epis;
@property (nonatomic, copy, getter=new, setter=setNew:) NSString * _Nonnull new_;
@property (nonatomic, copy) NSString * _Nonnull i_329;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit23CXKMVSourceQualityModel")
@interface CXKMVSourceQualityModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull playUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull short_title;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit14CXKMVStarModel")
@interface CXKMVStarModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull cover;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit18CXKMVSubtitleModel")
@interface CXKMVSubtitleModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull short_id;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull lang;
@property (nonatomic, copy) NSString * _Nonnull sub;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit19CXKMVTVContentModel")
@interface CXKMVTVContentModel : CXKMVBaseContentModel
@property (nonatomic, copy) NSArray<CXKMVTVSeasonModel *> * _Nonnull seasons;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit19CXKMVTVEpisodeModel")
@interface CXKMVTVEpisodeModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic) NSInteger order;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit18CXKMVTVSeasonModel")
@interface CXKMVTVSeasonModel : CXKBaseModel
@property (nonatomic, copy) NSString * _Nonnull title;
@property (nonatomic, copy) NSString * _Nonnull id;
@property (nonatomic, copy) NSArray<CXKMVTVEpisodeModel *> * _Nonnull episodes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11CXKMVAPIKit9CXKMVTool")
@interface CXKMVTool : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CXKMVTool * _Nonnull share;)
+ (CXKMVTool * _Nonnull)share SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, copy) NSURL * _Nonnull subtitlePath;
@property (nonatomic, copy) NSURL * _Nonnull zipPath;
+ (CXKMVSubtitleModel * _Nullable)chooseDefaulSubtitle:(NSArray<CXKMVSubtitleModel *> * _Nonnull)subtitles SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end






#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
