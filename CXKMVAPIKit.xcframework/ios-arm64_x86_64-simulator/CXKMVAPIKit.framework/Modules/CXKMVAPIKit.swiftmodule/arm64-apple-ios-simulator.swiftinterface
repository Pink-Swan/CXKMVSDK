// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name CXKMVAPIKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AdSupport
@_exported import CXKMVAPIKit
import CoreTelephony
import CryptoKit
import Foundation
import Swift
import UIKit
import ZipArchive
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension CXKMVAPIKit.HandyJSON {
  public func toJSON() -> [Swift.String : Any]?
  public func toJSONString(prettyPrint: Swift.Bool = false) -> Swift.String?
}
extension Swift.Collection where Self.Element : CXKMVAPIKit.HandyJSON {
  public func toJSON() -> [[Swift.String : Any]?]
  public func toJSONString(prettyPrint: Swift.Bool = false) -> Swift.String?
}
public protocol _ExtendCustomModelType : CXKMVAPIKit._Transformable {
  init()
  mutating func willStartMapping()
  mutating func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  mutating func didFinishMapping()
}
extension CXKMVAPIKit._ExtendCustomModelType {
  public mutating func willStartMapping()
  public mutating func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  public mutating func didFinishMapping()
}
open class NSDecimalNumberTransform : CXKMVAPIKit.TransformType {
  public typealias Object = Foundation.NSDecimalNumber
  public typealias JSON = Swift.String
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.NSDecimalNumber?
  open func transformToJSON(_ value: Foundation.NSDecimalNumber?) -> Swift.String?
  @objc deinit
}
@_silgen_name("swift_getTypeByMangledNameInContext")
public func _getTypeByMangledNameInContext(_ name: Swift.UnsafePointer<Swift.UInt8>, _ nameLength: Swift.Int, genericContext: Swift.UnsafeRawPointer?, genericArguments: Swift.UnsafeRawPointer?) -> (any Any.Type)?
@_silgen_name("swift_getTypeContextDescriptor")
public func _swift_getTypeContextDescriptor(_ metadata: Swift.UnsafeRawPointer?) -> Swift.UnsafeRawPointer?
extension CXKMVAPIKit.CXKMVNetworkAPI {
  @objc public static func fetchConfig(_ url: Swift.String, completion: ((Swift.String?) -> Swift.Void)? = nil)
  @objc public static func auth(completion: (() -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func fetchAll(page: Swift.Int = 1, pageSize: Swift.Int = 30, type: Swift.String? = CXKMVFilmType.all.value, genre: Swift.String? = nil, country: Swift.String? = nil, release: Swift.String? = nil, orderby: Swift.String? = nil, completion: ((CXKMVAPIKit.CXKMVAPIAllDatas) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func search(page: Swift.Int = 1, pageSize: Swift.Int = 24, keyword: Swift.String? = nil, completion: ((CXKMVAPIKit.CXKMVAPISearchDatas) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func filmDetail(id: Swift.String, type: CXKMVAPIKit.CXKMVFilmType, completion: CXKMVAPIKit.CXKMVAnyBlock? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func movieDetail(id: Swift.String, completion: ((CXKMVAPIKit.CXKMVMovieContentModel) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func tvDetail(id: Swift.String, completion: ((CXKMVAPIKit.CXKMVTVContentModel) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func tvSeasonInfo(id: Swift.String, completion: ((CXKMVAPIKit.CXKMVTVSeasonModel) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func tvEpisodeUrl(id: Swift.String, completion: (([CXKMVAPIKit.CXKMVSourceQualityModel]) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func subtitle(id: Swift.String, type: CXKMVAPIKit.CXKMVFilmType, completion: (([CXKMVAPIKit.CXKMVSubtitleModel]) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
  @objc public static func downloadSubtitle(_ model: CXKMVAPIKit.CXKMVSubtitleModel, completion: ((Foundation.URL) -> Swift.Void)? = nil, fails: CXKMVAPIKit.CXKMVErrorBlock? = nil)
}
extension CXKMVAPIKit.HandyJSON {
  public static func deserialize(from dict: Foundation.NSDictionary?, designatedPath: Swift.String? = nil) -> Self?
  public static func deserialize(from dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil) -> Self?
  public static func deserialize(from json: Swift.String?, designatedPath: Swift.String? = nil) -> Self?
}
extension Swift.Array where Element : CXKMVAPIKit.HandyJSON {
  public static func deserialize(from json: Swift.String?, designatedPath: Swift.String? = nil) -> [Element?]?
  public static func deserialize(from array: Foundation.NSArray?) -> [Element?]?
  public static func deserialize(from array: [Any]?) -> [Element?]?
}
@_hasMissingDesignatedInitializers public class JSONDeserializer<T> where T : CXKMVAPIKit.HandyJSON {
  public static func deserializeFrom(dict: Foundation.NSDictionary?, designatedPath: Swift.String? = nil) -> T?
  public static func deserializeFrom(dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil) -> T?
  public static func deserializeFrom(json: Swift.String?, designatedPath: Swift.String? = nil) -> T?
  public static func update(object: inout T, from dict: [Swift.String : Any]?, designatedPath: Swift.String? = nil)
  public static func update(object: inout T, from json: Swift.String?, designatedPath: Swift.String? = nil)
  public static func deserializeModelArrayFrom(json: Swift.String?, designatedPath: Swift.String? = nil) -> [T?]?
  public static func deserializeModelArrayFrom(array: Foundation.NSArray?) -> [T?]?
  public static func deserializeModelArrayFrom(array: [Any]?) -> [T?]?
  @objc deinit
}
public protocol _Measurable {
}
public func cxk_randomGenerateStrings(count: Swift.Int) -> Swift.String
open class EnumTransform<T> : CXKMVAPIKit.TransformType where T : Swift.RawRepresentable {
  public typealias Object = T
  public typealias JSON = T.RawValue
  public init()
  open func transformFromJSON(_ value: Any?) -> T?
  open func transformToJSON(_ value: T?) -> T.RawValue?
  @objc deinit
}
open class HexColorTransform : CXKMVAPIKit.TransformType {
  public typealias Object = UIKit.UIColor
  public typealias JSON = Swift.String
  public init(prefixToJSON: Swift.Bool = false, alphaToJSON: Swift.Bool = false)
  open func transformFromJSON(_ value: Any?) -> CXKMVAPIKit.HexColorTransform.Object?
  open func transformToJSON(_ value: CXKMVAPIKit.HexColorTransform.Object?) -> CXKMVAPIKit.HexColorTransform.JSON?
  @objc deinit
}
open class ISO8601DateTransform : CXKMVAPIKit.DateFormatterTransform {
  public init()
  @objc deinit
}
open class DateTransform : CXKMVAPIKit.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.Double
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.Date?
  open func transformToJSON(_ value: Foundation.Date?) -> Swift.Double?
  @objc deinit
}
public struct DeserializeOptions : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let caseInsensitive: CXKMVAPIKit.DeserializeOptions
  public static let defaultOptions: CXKMVAPIKit.DeserializeOptions
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = CXKMVAPIKit.DeserializeOptions
  public typealias Element = CXKMVAPIKit.DeserializeOptions
  public typealias RawValue = Swift.Int
}
public enum DebugMode : Swift.Int {
  case verbose
  case debug
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct HandyJSONConfiguration {
  public static var debugMode: CXKMVAPIKit.DebugMode {
    get
    set
  }
  public static var deserializeOptions: CXKMVAPIKit.DeserializeOptions
}
public protocol _Transformable : CXKMVAPIKit._Measurable {
}
public protocol TransformType {
  associatedtype Object
  associatedtype JSON
  func transformFromJSON(_ value: Any?) -> Self.Object?
  func transformToJSON(_ value: Self.Object?) -> Self.JSON?
}
open class TransformOf<ObjectType, JSONType> : CXKMVAPIKit.TransformType {
  public typealias Object = ObjectType
  public typealias JSON = JSONType
  public init(fromJSON: @escaping (JSONType?) -> ObjectType?, toJSON: @escaping (ObjectType?) -> JSONType?)
  open func transformFromJSON(_ value: Any?) -> ObjectType?
  open func transformToJSON(_ value: ObjectType?) -> JSONType?
  @objc deinit
}
public protocol _RawEnumProtocol : CXKMVAPIKit._Transformable {
  static func _transform(from object: Any) -> Self?
  func _plainValue() -> Any?
}
extension Swift.RawRepresentable where Self : CXKMVAPIKit._RawEnumProtocol {
  public static func _transform(from object: Any) -> Self?
  public func _plainValue() -> Any?
}
public protocol HandyJSONCustomTransformable : CXKMVAPIKit._ExtendCustomBasicType {
}
public protocol HandyJSON : CXKMVAPIKit._ExtendCustomModelType {
}
public protocol HandyJSONEnum : CXKMVAPIKit._RawEnumProtocol {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVTool : ObjectiveC.NSObject {
  @objc public static let share: CXKMVAPIKit.CXKMVTool
  @objc public var subtitlePath: Foundation.URL {
    @objc get
    @objc set
  }
  @objc public var zipPath: Foundation.URL {
    @objc get
    @objc set
  }
  @objc public static func chooseDefaulSubtitle(_ subtitles: [CXKMVAPIKit.CXKMVSubtitleModel]) -> CXKMVAPIKit.CXKMVSubtitleModel?
  @objc override dynamic public init()
  @objc deinit
}
public typealias CustomMappingKeyValueTuple = (Swift.Int, CXKMVAPIKit.MappingPropertyHandler)
public class MappingPropertyHandler {
  public init(rawPaths: [Swift.String]?, assignmentClosure: ((Any?) -> (Any?))?, takeValueClosure: ((Any?) -> (Any?))?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class HelpingMapper {
  public func specify<T>(property: inout T, name: Swift.String)
  public func specify<T>(property: inout T, names: [Swift.String])
  public func specify<T>(property: inout T, converter: @escaping (Swift.String) -> T)
  public func specify<T>(property: inout T, name: Swift.String?, converter: ((Swift.String) -> T)?)
  public func specify<T>(property: inout T, name: Swift.String?, converter: ((Swift.String) -> T)?, json: ((T) -> Swift.String?)?)
  public func specify<T>(property: inout T, names: [Swift.String]?, converter: ((Swift.String) -> T)?, json: ((T) -> Swift.String?)?)
  public func exclude<T>(property: inout T)
  @objc deinit
}
infix operator <-- : LogicalConjunctionPrecedence
public func <-- <T>(property: inout T, name: Swift.String) -> CXKMVAPIKit.CustomMappingKeyValueTuple
public func <-- <T>(property: inout T, names: [Swift.String]) -> CXKMVAPIKit.CustomMappingKeyValueTuple
public func <-- <Transform>(property: inout Transform.Object, transformer: Transform) -> CXKMVAPIKit.CustomMappingKeyValueTuple where Transform : CXKMVAPIKit.TransformType
public func <-- <Transform>(property: inout Transform.Object, transformer: (Swift.String?, Transform?)) -> CXKMVAPIKit.CustomMappingKeyValueTuple where Transform : CXKMVAPIKit.TransformType
public func <-- <Transform>(property: inout Transform.Object, transformer: ([Swift.String], Transform?)) -> CXKMVAPIKit.CustomMappingKeyValueTuple where Transform : CXKMVAPIKit.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: Transform) -> CXKMVAPIKit.CustomMappingKeyValueTuple where Transform : CXKMVAPIKit.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: (Swift.String?, Transform?)) -> CXKMVAPIKit.CustomMappingKeyValueTuple where Transform : CXKMVAPIKit.TransformType
public func <-- <Transform>(property: inout Transform.Object?, transformer: ([Swift.String], Transform?)) -> CXKMVAPIKit.CustomMappingKeyValueTuple where Transform : CXKMVAPIKit.TransformType
infix operator <<< : AssignmentPrecedence
public func <<< (mapper: CXKMVAPIKit.HelpingMapper, mapping: CXKMVAPIKit.CustomMappingKeyValueTuple)
public func <<< (mapper: CXKMVAPIKit.HelpingMapper, mappings: [CXKMVAPIKit.CustomMappingKeyValueTuple])
infix operator >>> : AssignmentPrecedence
public func >>> <T>(mapper: CXKMVAPIKit.HelpingMapper, property: inout T)
open class DataTransform : CXKMVAPIKit.TransformType {
  public typealias Object = Foundation.Data
  public typealias JSON = Swift.String
  public init()
  open func transformFromJSON(_ value: Any?) -> Foundation.Data?
  open func transformToJSON(_ value: Foundation.Data?) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class CXKBaseModel : ObjectiveC.NSObject, CXKMVAPIKit.HandyJSON {
  @objc required override dynamic public init()
  public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc deinit
}
@objc public enum CXKMVFilmType : Swift.Int {
  case movie = 1
  case tv = 2
  case all = 100
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension CXKMVAPIKit.CXKMVFilmType {
  public var value: Swift.String {
    get
  }
}
@objc public enum CXKMVFilterType : Swift.Int {
  case type
  case genre
  case release
  case country
  case order
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVAPIAllDatas : CXKMVAPIKit.CXKBaseModel {
  @objc public var recommends: [CXKMVAPIKit.CXKMVRecommendModel]
  @objc public var filters: CXKMVAPIKit.CXKMVFiltersModel
  @objc public var data_type: Swift.String
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVFiltersModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var orderbys: [CXKMVAPIKit.CXKMVFilterModel]
  @objc public var genres: [CXKMVAPIKit.CXKMVFilterModel]
  @objc public var pubs: [CXKMVAPIKit.CXKMVFilterModel]
  @objc public var types: [CXKMVAPIKit.CXKMVFilterModel]
  @objc public var countrys: [CXKMVAPIKit.CXKMVFilterModel]
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVFilterModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var title: Swift.String
  @objc public var id: Swift.String
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVRecommendModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var id: Swift.String
  @objc public var rate: Swift.String
  @objc public var title: Swift.String
  @objc public var genres: [Swift.String]
  @objc public var board: Swift.String
  @objc public var i_117: Swift.String
  @objc public var i_116: Swift.String
  @objc public var cover: Swift.String
  @objc public var m_type: Swift.String
  @objc public var data_type: Swift.String
  @objc public var quality: Swift.String
  @objc public var i_177: Swift.String
  @objc public var order: Swift.Int
  @objc public var seasons_epis: Swift.String
  @objc public var new: Swift.String
  @objc public var i_329: Swift.String
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVAPISearchDatas : CXKMVAPIKit.CXKBaseModel {
  @objc public var contents: [CXKMVAPIKit.CXKMVFilmModel]
  @objc public var contents2: [CXKMVAPIKit.CXKMVFilmModel]
  @objc public var z_info: [Swift.String : Any]
  @objc public var keywords: [Swift.String]
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVFilmModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var id: Swift.String
  @objc public var title: Swift.String
  @objc public var cover: Swift.String
  @objc public var rate: Swift.String
  @objc public var data_type: Swift.String
  @objc public var year: Swift.String
  @objc public var stars: [Swift.String]
  @objc public var genres: [Swift.String]
  @objc public var country: Swift.String
  @objc public var quality: Swift.String
  @objc public var seasons_epis: Swift.String
  @objc public var new: Swift.String
  @objc public var best: Swift.Int
  @objc public var board: Swift.String
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc public func toRecommendModel() -> CXKMVAPIKit.CXKMVRecommendModel
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVBaseContentModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var id: Swift.String
  @objc public var title: Swift.String
  @objc public var cover: Swift.String
  @objc public var rate: Swift.String
  @objc public var time: Swift.String
  @objc public var genres: [Swift.String]
  @objc public var country: Swift.String
  @objc public var des: Swift.String
  @objc public var type: CXKMVAPIKit.CXKMVFilmType
  @objc public var source: Swift.String
  @objc public var quality: Swift.String
  @objc public var like: Swift.Int
  @objc public var unlike: Swift.Int
  @objc public var stars: [CXKMVAPIKit.CXKMVStarModel]
  @objc public var relations: [CXKMVAPIKit.CXKMVContentRelatedModel]
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVContentRelatedModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var data_type: Swift.String
  @objc public var name: Swift.String
  @objc public var recommends: [CXKMVAPIKit.CXKMVRecommendModel]
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVMovieContentModel : CXKMVAPIKit.CXKMVBaseContentModel {
  @objc public var qualitys: [CXKMVAPIKit.CXKMVSourceQualityModel]
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVSourceQualityModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var title: Swift.String
  @objc public var playUrl: Swift.String
  @objc public var short_title: Swift.String {
    @objc get
  }
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVStarModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var id: Swift.String
  @objc public var title: Swift.String
  @objc public var cover: Swift.String
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVTVContentModel : CXKMVAPIKit.CXKMVBaseContentModel {
  @objc public var seasons: [CXKMVAPIKit.CXKMVTVSeasonModel]
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVTVSeasonModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var title: Swift.String
  @objc public var id: Swift.String
  @objc public var episodes: [CXKMVAPIKit.CXKMVTVEpisodeModel]
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVTVEpisodeModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var title: Swift.String
  @objc public var id: Swift.String
  @objc public var order: Swift.Int
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVSubtitleModel : CXKMVAPIKit.CXKBaseModel {
  @objc public var short_id: Swift.String
  @objc public var name: Swift.String
  @objc public var lang: Swift.String
  @objc public var sub: Swift.String
  override public func mapping(mapper: CXKMVAPIKit.HelpingMapper)
  @objc required dynamic public init()
  @objc deinit
}
extension Swift.String {
  public var filmType: CXKMVAPIKit.CXKMVFilmType {
    get
  }
  public var isNew: Swift.Bool {
    get
  }
}
open class URLTransform : CXKMVAPIKit.TransformType {
  public typealias Object = Foundation.URL
  public typealias JSON = Swift.String
  public init(shouldEncodeURLString: Swift.Bool = true)
  open func transformFromJSON(_ value: Any?) -> Foundation.URL?
  open func transformToJSON(_ value: Foundation.URL?) -> Swift.String?
  @objc deinit
}
public protocol _ExtendCustomBasicType : CXKMVAPIKit._Transformable {
  static func _transform(from object: Any) -> Self?
  func _plainValue() -> Any?
}
public typealias CXKMVAnyBlock = (_ value: Any?) -> ()
public typealias CXKMVErrorBlock = (_ error: (any Swift.Error)?) -> ()
public typealias HJCompletionBlock<T> = (_ result: CXKMVAPIKit.CXKMVResult<T>) -> Swift.Void
public enum CXKMVResult<T> {
  case success(T?)
  case failure((any Swift.Error)?)
}
public struct CXKMVError {
  public let status: Swift.Int
  public let msg: Swift.String?
  public var error: Foundation.NSError {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class CXKMVNetworkAPI : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
open class CustomDateFormatTransform : CXKMVAPIKit.DateFormatterTransform {
  public init(formatString: Swift.String)
  @objc deinit
}
open class DateFormatterTransform : CXKMVAPIKit.TransformType {
  public typealias Object = Foundation.Date
  public typealias JSON = Swift.String
  final public let dateFormatter: Foundation.DateFormatter
  public init(dateFormatter: Foundation.DateFormatter)
  open func transformFromJSON(_ value: Any?) -> Foundation.Date?
  open func transformToJSON(_ value: Foundation.Date?) -> Swift.String?
  @objc deinit
}
extension Foundation.NSString : CXKMVAPIKit._Transformable {}
extension Foundation.NSNumber : CXKMVAPIKit._Transformable {}
extension Foundation.NSArray : CXKMVAPIKit._Transformable {}
extension Foundation.NSDictionary : CXKMVAPIKit._Transformable {}
extension Swift.String : CXKMVAPIKit._Transformable {}
extension CXKMVAPIKit.DebugMode : Swift.Equatable {}
extension CXKMVAPIKit.DebugMode : Swift.Hashable {}
extension CXKMVAPIKit.DebugMode : Swift.RawRepresentable {}
extension Swift.Array : CXKMVAPIKit._Transformable {}
extension Swift.Int : CXKMVAPIKit._Transformable {}
extension Swift.Dictionary : CXKMVAPIKit._Transformable {}
extension CXKMVAPIKit.CXKMVFilmType : Swift.Equatable {}
extension CXKMVAPIKit.CXKMVFilmType : Swift.Hashable {}
extension CXKMVAPIKit.CXKMVFilmType : Swift.RawRepresentable {}
extension CXKMVAPIKit.CXKMVFilterType : Swift.Equatable {}
extension CXKMVAPIKit.CXKMVFilterType : Swift.Hashable {}
extension CXKMVAPIKit.CXKMVFilterType : Swift.RawRepresentable {}
extension Swift.Optional : CXKMVAPIKit._Transformable {}
extension Swift.UInt : CXKMVAPIKit._Transformable {}
extension Swift.Int8 : CXKMVAPIKit._Transformable {}
extension Swift.Int16 : CXKMVAPIKit._Transformable {}
extension Swift.Int32 : CXKMVAPIKit._Transformable {}
extension Swift.Int64 : CXKMVAPIKit._Transformable {}
extension Swift.UInt8 : CXKMVAPIKit._Transformable {}
extension Swift.UInt16 : CXKMVAPIKit._Transformable {}
extension Swift.UInt32 : CXKMVAPIKit._Transformable {}
extension Swift.UInt64 : CXKMVAPIKit._Transformable {}
extension Swift.Bool : CXKMVAPIKit._Transformable {}
extension Swift.Float : CXKMVAPIKit._Transformable {}
extension Swift.Double : CXKMVAPIKit._Transformable {}
extension Swift.Set : CXKMVAPIKit._Transformable {}
